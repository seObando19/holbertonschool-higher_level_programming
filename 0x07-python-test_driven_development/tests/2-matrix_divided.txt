-----------------------------------
	Testing for script
-----------------------------------
File:
2-matrix_divided.txt
porpuse:
 function that divides all elements of a matrix.
-----------------------------------
Import module
-------------
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Tests cases:
------------
-----------------------------
Test 1:Passing only the matrix
-----------------------------
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix)
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

----------------------------------------
Test 2: Passing the matrix and integer
----------------------------------------
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 1))
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

------------------------------
Test 3: Passing the matrix and float
------------------------------
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 2.5))
[[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]

----------------------
Test 4: Passing the matrix and string
----------------------
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, "2"))
Traceback (most recent call last):
...
TypeError: div must be a number

-------------------------
Test 5: passing the matrix and zero number
-------------------------
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 0))
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

-------------------------------------
Test 6: passing the matrix with row of different sizes.
-------------------------------------
>>> matrix = [[1, 2], [4, 5, 6]]
>>> matrix_divided(matrix, 1))
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

-----------------------
Test 7: passing one row of the matrix as tuple
-----------------------
>>> matrix = [(1, 2, 3), [4, 5, 6]]
>>> matrix_divided(matrix, 1))
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

-------------------------------
Test 8: passing an empty list of lists
-------------------------------
>>> matrix = [[], [], []]
>>> matrix_divided(matrix, 1))
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

----------------------------------
Test 9: passing div as none
----------------------------------
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, None)
Traceback (most recent call last):
...
TypeError: div must be a number

----------------------------
Test 10:  passing div as infinity value
----------------------------
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, float("inf"))
[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

----------------------------
Test 11:  passing empty list
----------------------------
>>> matrix = []
>>> matrix_divided(matrix, 1)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

----------------------------
Test 12:  passing div as nan value
----------------------------
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, float("nan"))
[[nan, nan, nan], [nan, nan, nan]]

----------------------------
Test 13:   passing a string inside matrix
----------------------------
>>> matrix = [[1, "2", 3], [4, 5, 6]]
>>> matrix_divided(matrix, 1)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

----------------------------
Test 14:   passing a matrix as tuple of lists
----------------------------
>>> matrix = ([1, 2, 3], [4, 5, 6])
>>> matrix_divided(matrix, 1)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

----------------------------
Test 15:   passing empty list
----------------------------
>>> matrix = []
>>> matrix_divided(matrix, 1)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
