Test cases
==========

Import module
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

>>> bg.integer_validator("Hi", 2)

>>> bg.integer_validator("Hi", -1)
Traceback (most recent call last):
...
ValueError: Hi must be greater than 0

>>> bg.integer_validator("Hi", "Hola")
Traceback (most recent call last):
...
TypeError: Hi must be an integer

>>> bg.integer_validator("Hi", True)
Traceback (most recent call last):
...
TypeError: Hi must be an integer

>>> bg.integer_validator("Hi", None)
Traceback (most recent call last):
...
TypeError: Hi must be an integer

>>> bg.integer_validator("Hi", {1, 2, 3})
Traceback (most recent call last):
...
TypeError: Hi must be an integer

>>> bg.integer_validator("Hi", 45.8)
Traceback (most recent call last):
...
TypeError: Hi must be an integer

>>> bg.integer_validator("Hi", (1,))
Traceback (most recent call last):
...
TypeError: Hi must be an integer

>>> bg.integer_validator("Hi", 0)
Traceback (most recent call last):
...
ValueError: Hi must be greater than 0

>>> bg.integer_validator("Hi", [0, 2, 20])
Traceback (most recent call last):
...
TypeError: Hi must be an integer

>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

>>> bg = BaseGeometry(100)
Traceback (most recent call last):
...
TypeError: object() takes no parameters

>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("Hi")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator("Hi", 1, 2)
Traceback (most recent call last):
...
TypeError: integer_validator() takes 3 positional arguments but 4 were given